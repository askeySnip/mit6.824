package main

import "os"
import "fmt"
import "mapreduce"
import (
	"strings"
	"strconv"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).
	var kvs []mapreduce.KeyValue
	word_map := make(map[string]bool)
	words := strings.FieldsFunc(value, split)
	for _, word := range words {
		_, ok := word_map[word];
		if !ok {
			word_map[word] = true
		}
	}
	for k, _ := range word_map {
		kvs = append(kvs, mapreduce.KeyValue{k, document})
	}
	// fmt.Printf(strconv.Itoa(len(kvs)))
	return kvs
}

func split(s rune) bool {
	if unicode.IsLetter(s) {
		return false;
	}
	return true;
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// Your code here (Part V).
	var ret string
	ret = strconv.Itoa(len(values))
	ret += " "
	for i, s := range values {
		if i > 0 {
			ret += ","
		}
		ret = ret + s
	}
	// fmt.Printf(ret)
	return ret
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
